/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.popover;

import android.app.Activity;
import android.view.View;

import androidx.annotation.NonNull;
import androidx.lifecycle.LifecycleOwner;

import com.skydoves.balloon.ArrowOrientation;
import com.skydoves.balloon.ArrowPositionRules;
import com.skydoves.balloon.Balloon;
import com.skydoves.balloon.BalloonAnimation;
import com.skydoves.balloon.BalloonSizeSpec;
import com.skydoves.balloon.OnBalloonClickListener;
import com.skydoves.balloon.OnBalloonDismissListener;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;

import ti.modules.titanium.ui.ViewProxy;


// This proxy can be created by calling TiPopover.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = TiPopoverModule.class)
public class PopoverProxy extends TiViewProxy {
    // Standard Debugging variables
    private static final String LCAT = "ExampleProxy";
    private static final boolean DBG = TiConfig.LOGD;
    Balloon balloon = null;
    View targetView;
    int direction;
    int arrowColor;
    int arrowSize;
    ViewProxy contentView = null;
    View customView = null;
    ViewProxy view = null;
    PopoverView pview;
    // Constructor
    public PopoverProxy() {
        super();
    }

    @Override
    public TiUIView createView(Activity activity) {
        pview = new PopoverView(this);
        return pview;
    }

    // Handle creation options
    @Override
    public void handleCreationDict(KrollDict options) {
        super.handleCreationDict(options);

        arrowColor = TiConvert.toColor((String) options.get("arrowColor"));
        arrowSize = TiConvert.toInt(options.get("arrowSize"), 10);
    }

    // Methods
    @Kroll.method
    public void show(KrollDict options) {

        LifecycleOwner lifecycle = (LifecycleOwner) TiApplication.getAppCurrentActivity();



        if (pview != null && customView == null) {
            //customView = pview.getNativeView();   // issue error
            customView = pview.getPopView().getRootView();
        }

        if (options.containsKey("view")) {
            view = (ViewProxy) options.get("view");
            targetView = view.getOrCreateView().getNativeView();
        }
        direction = options.getInt("direction");

        ArrowOrientation orientation = ArrowOrientation.BOTTOM;
        if (direction == TiPopoverModule.POPOVER_ARROW_DIRECTION_DOWN) {
            orientation = ArrowOrientation.BOTTOM;
        } else if (direction == TiPopoverModule.POPOVER_ARROW_DIRECTION_UP) {
            orientation = ArrowOrientation.TOP;
        } else if (direction == TiPopoverModule.POPOVER_ARROW_DIRECTION_LEFT) {
            orientation = ArrowOrientation.RIGHT;
        } else if (direction == TiPopoverModule.POPOVER_ARROW_DIRECTION_RIGHT) {
            orientation = ArrowOrientation.LEFT;
        }

        if (balloon != null) {
            balloon.dismiss();
            balloon.clearAllPreferences();
            balloon = null;
        }
        Balloon.Builder balloonBuilder = new Balloon.Builder(TiApplication.getAppCurrentActivity())
                .setArrowSize(arrowSize)
                .setArrowOrientation(orientation)
                .setArrowPositionRules(ArrowPositionRules.ALIGN_BALLOON)
                .setArrowPosition(0.5f)
                .setWidth(BalloonSizeSpec.WRAP)
                .setHeight(BalloonSizeSpec.WRAP)
                .setCornerRadius(4f)
                .setAlpha(0.9f)
                .setArrowColor(arrowColor)
                .setOnBalloonClickListener(new OnBalloonClickListener() {
                    @Override
                    public void onBalloonClick(@NonNull View view) {
                        fireEvent("click", new KrollDict());
                    }
                })
                .setOnBalloonDismissListener(new OnBalloonDismissListener() {
                    @Override
                    public void onBalloonDismiss() {
                        fireEvent("close", new KrollDict());
                    }
                })
                .setBalloonAnimation(BalloonAnimation.ELASTIC)
                .setLifecycleOwner(lifecycle);


        if (customView != null) {
            balloonBuilder.setLayout(customView);
        }

        balloon = balloonBuilder.build();

        if (targetView != null) {
            if (direction == TiPopoverModule.POPOVER_ARROW_DIRECTION_DOWN) {
                balloon.showAlignTop(targetView);
            } else if (direction == TiPopoverModule.POPOVER_ARROW_DIRECTION_UP) {
                balloon.showAlignBottom(targetView);
            } else if (direction == TiPopoverModule.POPOVER_ARROW_DIRECTION_LEFT) {
                balloon.showAlignLeft(targetView);
            } else if (direction == TiPopoverModule.POPOVER_ARROW_DIRECTION_RIGHT) {
                balloon.showAlignRight(targetView);
            } else {
                balloon.showAsDropDown(targetView);
            }
        } else {
            Log.e(LCAT, "You must set attachTo");
        }

    }
}
